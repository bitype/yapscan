// Code generated by go-enum
// DO NOT EDIT!

package system

import (
	"fmt"
)

const (
	// Bitness32Bit is a Bitness of type 32Bit
	Bitness32Bit Bitness = iota
	// Bitness64Bit is a Bitness of type 64Bit
	Bitness64Bit
)

const _BitnessName = "32Bit64Bit"

var _BitnessMap = map[Bitness]string{
	0: _BitnessName[0:5],
	1: _BitnessName[5:10],
}

// String implements the Stringer interface.
func (x Bitness) String() string {
	if str, ok := _BitnessMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Bitness(%d)", x)
}

var _BitnessValue = map[string]Bitness{
	_BitnessName[0:5]:  0,
	_BitnessName[5:10]: 1,
}

// ParseBitness attempts to convert a string to a Bitness
func ParseBitness(name string) (Bitness, error) {
	if x, ok := _BitnessValue[name]; ok {
		return x, nil
	}
	return Bitness(0), fmt.Errorf("%s is not a valid Bitness", name)
}

// MarshalText implements the text marshaller method
func (x Bitness) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Bitness) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseBitness(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

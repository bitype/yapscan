// Code generated by go-enum
// DO NOT EDIT!

package procIO

import (
	"fmt"
	"strings"
)

const (
	// StateCommit is a State of type Commit
	StateCommit State = iota
	// StateFree is a State of type Free
	StateFree
	// StateReserve is a State of type Reserve
	StateReserve
)

const _StateName = "CommitFreeReserve"

var _StateNames = []string{
	_StateName[0:6],
	_StateName[6:10],
	_StateName[10:17],
}

// StateNames returns a list of possible string values of State.
func StateNames() []string {
	tmp := make([]string, len(_StateNames))
	copy(tmp, _StateNames)
	return tmp
}

var _StateMap = map[State]string{
	0: _StateName[0:6],
	1: _StateName[6:10],
	2: _StateName[10:17],
}

// String implements the Stringer interface.
func (x State) String() string {
	if str, ok := _StateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("State(%d)", x)
}

var _StateValue = map[string]State{
	_StateName[0:6]:                    0,
	strings.ToLower(_StateName[0:6]):   0,
	_StateName[6:10]:                   1,
	strings.ToLower(_StateName[6:10]):  1,
	_StateName[10:17]:                  2,
	strings.ToLower(_StateName[10:17]): 2,
}

// ParseState attempts to convert a string to a State
func ParseState(name string) (State, error) {
	if x, ok := _StateValue[name]; ok {
		return x, nil
	}
	return State(0), fmt.Errorf("%s is not a valid State, try [%s]", name, strings.Join(_StateNames, ", "))
}

// MarshalText implements the text marshaller method
func (x State) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *State) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// TypeImage is a Type of type Image
	TypeImage Type = iota
	// TypeMapped is a Type of type Mapped
	TypeMapped
	// TypePrivate is a Type of type Private
	TypePrivate
)

const _TypeName = "ImageMappedPrivate"

var _TypeNames = []string{
	_TypeName[0:5],
	_TypeName[5:11],
	_TypeName[11:18],
}

// TypeNames returns a list of possible string values of Type.
func TypeNames() []string {
	tmp := make([]string, len(_TypeNames))
	copy(tmp, _TypeNames)
	return tmp
}

var _TypeMap = map[Type]string{
	0: _TypeName[0:5],
	1: _TypeName[5:11],
	2: _TypeName[11:18],
}

// String implements the Stringer interface.
func (x Type) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Type(%d)", x)
}

var _TypeValue = map[string]Type{
	_TypeName[0:5]:                    0,
	strings.ToLower(_TypeName[0:5]):   0,
	_TypeName[5:11]:                   1,
	strings.ToLower(_TypeName[5:11]):  1,
	_TypeName[11:18]:                  2,
	strings.ToLower(_TypeName[11:18]): 2,
}

// ParseType attempts to convert a string to a Type
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(0), fmt.Errorf("%s is not a valid Type, try [%s]", name, strings.Join(_TypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x Type) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Type) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

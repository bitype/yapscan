// Code generated by go-enum
// DO NOT EDIT!

package fileIO

import (
	"fmt"
)

const (
	// DriveTypeUnknown is a DriveType of type Unknown
	DriveTypeUnknown DriveType = iota
	// DriveTypeRemovable is a DriveType of type Removable
	DriveTypeRemovable
	// DriveTypeFixed is a DriveType of type Fixed
	DriveTypeFixed
	// DriveTypeRemote is a DriveType of type Remote
	DriveTypeRemote DriveType = iota + 1
	// DriveTypeCDRom is a DriveType of type CDRom
	DriveTypeCDRom DriveType = iota + 4
	// DriveTypeRAM is a DriveType of type RAM
	DriveTypeRAM DriveType = iota + 11
)

const _DriveTypeName = "UnknownRemovableFixedRemoteCDRomRAM"

var _DriveTypeMap = map[DriveType]string{
	0:  _DriveTypeName[0:7],
	1:  _DriveTypeName[7:16],
	2:  _DriveTypeName[16:21],
	4:  _DriveTypeName[21:27],
	8:  _DriveTypeName[27:32],
	16: _DriveTypeName[32:35],
}

// String implements the Stringer interface.
func (x DriveType) String() string {
	if str, ok := _DriveTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DriveType(%d)", x)
}

var _DriveTypeValue = map[string]DriveType{
	_DriveTypeName[0:7]:   0,
	_DriveTypeName[7:16]:  1,
	_DriveTypeName[16:21]: 2,
	_DriveTypeName[21:27]: 4,
	_DriveTypeName[27:32]: 8,
	_DriveTypeName[32:35]: 16,
}

// ParseDriveType attempts to convert a string to a DriveType
func ParseDriveType(name string) (DriveType, error) {
	if x, ok := _DriveTypeValue[name]; ok {
		return x, nil
	}
	return DriveType(0), fmt.Errorf("%s is not a valid DriveType", name)
}

// MarshalText implements the text marshaller method
func (x DriveType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DriveType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDriveType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

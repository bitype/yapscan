// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package yapscan

import (
	procIO "github.com/fkie-cad/yapscan/procIO"
	mock "github.com/stretchr/testify/mock"
)

// mockMemoryReader is an autogenerated mock type for the memoryReader type
type mockMemoryReader struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *mockMemoryReader) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: p
func (_m *mockMemoryReader) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reset provides a mock function with given fields:
func (_m *mockMemoryReader) Reset() (procIO.MemoryReader, error) {
	ret := _m.Called()

	var r0 procIO.MemoryReader
	if rf, ok := ret.Get(0).(func() procIO.MemoryReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(procIO.MemoryReader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
